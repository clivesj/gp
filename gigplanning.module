<?php

/**
 * @file
 * Gigplanning - module to manage your band
 */

// $Id$

function gigplanning_perm() {
  return array('change booking status', 'send reminder', 'Use repetitie');
}

function gigplanning_menu() {
  $items['optreden/set_stage'] = array(
    'title' => 'Optreden Set Stage',
    'access callback' => 'user_access',
    'access arguments' => array('change booking status'),
    'description' => '',
    'page callback' => 'gp_optreden_set_stage',
    'type' => MENU_CALLBACK,
  );
  $items['optreden/changestatus'] = array(
    'title' => 'Optreden',
    'access callback' => 'user_access',
    'access arguments' => array('change booking status'),
    'description' => '',
    'page callback' => 'gp_optreden_changestatus',
    'type' => MENU_CALLBACK,
  );
    $items['optreden/reminder'] = array(
    'title' => 'Reminder E-mail',
    'access callback' => 'user_access',
    'access arguments' => array('send reminder'),
    'description' => '',
    'page callback' => 'gp_optreden_reminder',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/gigplanning'] = array(
    'title' => 'Gigplanning',
    'description' => 'Configure Gigplanning',
    'position' => 'right',
    'weight' => -5,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => '/system/admin/inc',
    'file_path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/gigplanning/settings'] = array(
      'title' => 'Gigplanning Settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('gigplanning_admin_settings'),
      'access arguments' => array('administer site configuration'),
      'file' => 'gigplanning.admin.inc',
      'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/gigplanning/flex'] = array(
    'title' => 'Flex Sections',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gigplanning_flex_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'gigplanning.admin.inc',
  );
  $items['admin/config/gigplanning/section_size'] = array(
    'title' => 'Section Size',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gigplanning_section_size_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'gigplanning.admin.inc',
  );
  $items['gp/sync_sections'] = array(
    'page callback' => 'gigplanning_sync_sections',
    'access arguments' => array('administer site configuration'),
  );
  $items['gp/user_maintenance'] = array(
    'page callback' => 'gigplanning_users_maintenance',
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

function gigplanning_init() {
  drupal_add_css(drupal_get_path('module', 'gigplanning') .'/css/gigplanning.css');
  drupal_add_js(drupal_get_path('module', 'gigplanning') .'/js/set_stage.js');
}

/**
 * Implements hook_node_view().
 */
function gigplanning_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full' && $node-> type == 'optreden') {
    $variables = _gp_gig_table_get_variables($node-> nid);
    $node-> content['gp_gig_table'] = array(
      '#markup' => theme('gp_gig_table', $variables),
      '#weight' => 10,
      );
  }
  return $node;
}

function _gp_aanw_img($aanw) {
  if ($aanw == "Ja") {
    return "<img src='/sites/all/themes/danland/images/aanw_Ja.png' alt='Ja' />";
  }
  elseif ($aanw == "Nee") {
  return "<img src='/sites/all/themes/danland/images/aanw_Nee' alt='Nee' />";
  }
  else {
    return "";
  }
}

/* returns array containing sections
 * $type: "repetitie" unsets unnessesary sections
 */
function _gp_secties($repetitie = TRUE) {
  $sql= "SELECT DISTINCT(value) FROM profile_value WHERE fid = :d ORDER BY value ASC";
  $result = db_query($sql, array(':d' => variable_get('gigplanning_section', 'profile-sectie')));
  $rows = array();
  foreach ($result as $row) {
     $rows[$row-> value] = $row-> value;
  }
  /* D6 while ($row = db_fetch_array($result)) {
    $rows[$row['value']] = $row['value'];
  } */
  // TODO unset flex secties
  unset($rows['Niet-speler']);
  if ($repetitie) { unset($rows['Licht en Geluid'], $rows['DJ']);}
  return $rows;
}

//used by repetitie
function gp_repetitie_list($limit) {
  $sql = "SELECT
      n.nid, title,
    r.field_soort_repetitie_value as soort,
    r.field_status_repetitie_value as status_rep,
    r.field_repetitie_bijzonderheden_value as bijz,
    DATE(r.field_datum_repetitie_value) as sort_date,
    DATE_FORMAT(DATE(r.field_datum_repetitie_value), '%%d/%%m') as datum,
    DAYNAME(r.field_datum_repetitie_value) as dag
      FROM node n
          LEFT JOIN content_type_repetitie r on (n.nid = r.nid)
          WHERE r.field_datum_repetitie_value >= CURDATE() AND type = ':type'
        ORDER BY sort_date
          LIMIT ':limit'";
  $result = db_query($sql, array(':type' => 'repetitie', ':limit' => $limit));
  foreach ($result as $row) {
    $rows[] = (array)$row;
    //drupal_set_message($row['datum']);
  }
  return $rows;
}

function _gp_rep_user_list($user_id, $limit) {
  $sql = _gp_repetitie_user_list_sql();
  $result = db_query($sql, array(':uid' => $user_id, ':type' => 'repetitie', ':limit' => $limit));
  foreach ($result as $row) {
    $rows[] = (array)$row;
  }
  return $rows;
}

function _gp_repetitie_user_list_sql() {
  return  "SELECT
      n.nid,
      title,
      r.field_soort_repetitie_value as soort,
    DATE(r.field_datum_repetitie_value) as sort_date,
      DATE_FORMAT(DATE(r.field_datum_repetitie_value), '%%d %%M') as datum,
      DAYNAME(r.field_datum_repetitie_value) as dag,
      aanw, urid
    FROM node n
        LEFT JOIN content_type_repetitie r on (n.nid = r.nid)
        LEFT JOIN gp_repetitie_user g on (n.nid = g.nid AND g.uid = ':uid')
        WHERE r.field_datum_repetitie_value >= CURDATE() AND type = ':type'
        ORDER BY sort_date
          LIMIT ':limit'";
}

function gp_optreden_changestatus($optreden_id, $speler_id, $new_status) {
  $sql = "UPDATE {gp_optredens} SET speel_status = ':speel_status' WHERE nid = ':nid' AND uid = ':uid'";
  $res = db_query($sql, array(':speel_status' => $new_status, ':nid' => $optreden_id, ':uid' => $speler_id));
  //debug - drupal_set_message($new_status);
  switch ($new_status) {
      case 'ja':
        $reactie_text = t('Je hebt je opgegeven voor dit optreden');
        break;
      case 'nee':
        $reactie_text = t('Je doet niet mee. Je kunt dit indien gewenst alsnog aanpassen');
        break;
      case 'vraagteken':
        $reactie_text = t('Er staat voor een vraagteken voor dit optreden. Je kunt dit indien gewenst alsnog aanpassen');
  }
  print drupal_to_js(
    array (
    'new_status' => $new_status,
    'reactie_text' => $reactie_text,
    'id' => $speler_id,
    )
  );
}

/*
 * pv.fid bevat de waarde voor "Sectie"
 * $nid, nid to check which players to exclude from gig
 */
function _gp_get_all_players_uid($node) {
  //debug -  print_r($node);
  // get all sections
  $sections = gp_get_all_sections();
  // get the sections to exclude by default
  $excl_sections = variable_get('gigplanning_flex_sections', NULL);
  if ($excl_sections) {
  foreach ($excl_sections as $excl_section){
      if ($excl_section) {
        //unset this section
    //debug -     drupal_set_message($excl_section. ' will be unset');
    unset($sections[$excl_section]);
    }
  }
  }
  //debug -  print_r($sections);
  // get sections to include for this node
  $flex_sections = $node-> field_also_invite;
  //debug - print_r($flex_sections);
  if ($flex_sections) {
    foreach ($flex_sections as $flex_section_arrays) {
    foreach ($flex_section_arrays as $key => $value) {
      $sections[$value] = $value;
    }
  }
  }
  //debug -   print_r($sections);
  // get all the members for the modified sectionlist
  $sql="SELECT u.uid
        FROM users u
        JOIN profile_value pv ON (u.uid = pv.uid)
        JOIN users_roles ur ON (u.uid = ur.uid)
          WHERE
          pv.fid = ':fid' AND pv.`value` IN('". implode("','", $sections) . '\')' .
             "AND u.`status` = 1
              AND ur.rid = ':rid'";
  //TODO default value bij variable_get is onzinnig
  $res = db_query($sql, array(':fid' => variable_get('gigplanning_section', 'profile-sectie'), ':rid' => variable_get('gigplanning_role_bandmembers', 'vaste_speler')));
  if (!$res) {
    drupal_set_message("db error while picking up splelers_id");
  }
  else {
    while ($res_arr = db_fetch_array($res)) {
        $spelers_ids[] = $res_arr["uid"];
    }
  }
  // invallers:
  $invallers = $node-> field_invallers;
  if ($invallers) {
    foreach ($invallers as $invaller) {
    if ($invaller['uid']) {
      $spelers_ids[] = $invaller['uid'];
      //debug -       print_r($spelers_ids); //   drupal_set_message($invaller['uid']);
    }
  }
  }
  return $spelers_ids;
}

function gp_idtoname($uid) {
  $name = db_result(db_query("SELECT name FROM {users} WHERE uid = ':uid'", array(':uid' => $uid)));
return $name;
}

function gp_gp_nametoid($name) {
  $id = db_result(db_query("SELECT uid FROM {users} WHERE name = ':name'", array(':name' => $name)));
  return $id;
}

/* Gebaseerd op bovenstaande functie
 * maakt een array van openstaande spelers
 * status: ja, nee, vraagteken, geenreactie
 * style: table, list
 */


function _gp_openstaande_optredens($uid) {
  $sql = "SELECT b.nid
         FROM {gp_optredens} b JOIN {content_type_optreden} o ON b.nid = o.nid
         WHERE b.uid = :uid AND b.speel_status = :speel_status AND o.field_status_value <> 'geannuleerd' AND o.field_datum_value > NOW()";
  $res = db_query($sql, array(':uid' => $uid, ':speel_status' => 'geenreactie'));
  $rows = array();
  $output = "<h3>Listed below are the gigs which are open for this account</h2><ul>";
  while ($ar = $res-> fetchAssoc()) {
    $gig = node_load($ar['nid']);
    $output .= "<li><a href='/node/" . $ar['nid'] . "'>" . $gig-> title . "</a></li>";
  }
  $output .= "</ul>";
return $output;
}

/**
 * Implements hook_node_insert().
 */
function gigplanning_node_insert($node) {
  if ($node-> type == "optreden") {
    //debug - print_r($node);
    $ids = _gp_get_all_players_uid($node);
    global $base_url;
    //opbouw mail
    $params['optreden_titel'] = $node-> title;
    $params['optreden'] .= "Optreden      : " . $node-> title ."\n\n";
    $params['optreden'] .= "Datum optreden: " . substr($node-> field_datum[0]['value'], 0, 10) ."\n";
    $params['optreden'] .= "Reageren voor : " . substr($node-> field_reageren[0]['value'], 0, 10) ."\n";
    $params['optreden'] .= "Tijd          : " . $node-> field_tijd[0]['value'] ."\n";
    $params['optreden'] .= "Bijzonderheden:\n" . $node-> field_bijzonderheden[0]['value'] . "\n\n";
    $params['optreden'] .= "Overige gegevens zijn nog niet bekend cq. beschikbaar op de website\n";
    $params['node_url'] .= $base_url . "/node/". $node-> nid;
    $params['afz'] = gp_idtoname($node-> uid);
    //$account = gp_get_user_object($id);
    //$params['account'] = $account;
    foreach ($ids as $key => $id) {
      //gegevens opslaan in tabel voor gegevens bezetting to DB
      gp_bezetting_db($node-> nid, $id, 'insert');
      $account = user_load($id);
      $params['account'] = $account;
      drupal_mail('gigplanning', 'nwe_optreden', $account->mail, user_preferred_language($account), $params);
    }
  }
}

/**
 * Implements hook_node_update().
 */
function gigplanning_node_update($node) {
  if ($node-> type == "optreden") {
    if ($node->field_verz_not[0]['value'] == "ja") {
      $verzend = TRUE;
    }
    else {
      $verzend = FALSE;
    }
    global $base_url;
    // debug -   print_r($node);
    $ids = gp_get_all_players_uid($node);
    // debug -  print_r($ids);
    foreach ($ids as $id) {
      gp_bezetting_db($node-> nid, $id, 'edit');
      if ($verzend) {
        // prepare mail
        $account = user_load($id);
        $params['account'] = $account;
        $params['optreden_titel'] = $node-> title;
        $params['optreden'] = "Datum optreden: ". substr($node-> field_datum[0]['value'], 0, 10) ."\n\n";
        $params['optreden'] .= "De gevens van dit optreden zijn aangepast.\nBijzonderheden:\n" . $node-> field_bijzonderheden[0]['value'] . "\n\n" . "Selecteer onderstaande link voor meer informatie\n\n";
        $params['node_url'] = $base_url . "/node/". $node-> nid;
        $params['afz'] = gp_idtoname($node-> uid);
        drupal_mail('gigplanning', 'update_optreden', $account->mail, user_preferred_language($account), $params);
      }
    }
   if (!$verzend) {
     $sql ="UPDATE content_type_optreden SET field_verz_not_value = :field_value WHERE :nid";
    db_query($sql, array(':field_value' => "ja", ':nid' => $node ->nid));
    drupal_set_message(t("No email notifications send for this update"));
  }
  //remove players from db that are not anymore present in giglist
  gp_bezetting_remove_ghosts($ids, $node-> nid);
}

/**
 * Implements hook_node_delete().
 */
function gigplanning_node_delete($node) {
  /* when node optreden is deleted this function deletes the entries in de the gig database */
  if ($node-> type == "optreden") {
    $result = db_query("DELETE FROM {gp_optredens} WHERE nid = ':nid'", array(':nid' => $node-> nid));
    if ($result) {
      drupal_set_message('Optreden is tevens verwijderd uit spelers-database');
    }
    else {
      drupal_set_message('Optreden niet verwijderd uit spelers-database');
    }
  }
}

// giggegevens opslaan in tabel voor bezetting
function gp_bezetting_db($nid, $id, $mode) {
  if ($mode == 'insert') {
    $res = db_query("INSERT INTO {gp_optredens} (nid, uid, speel_status)
                   VALUES (':nid', ':uid', ':speel_status')", array( ':nid' =>$nid, ':uid' => $id, ':speel_status' => 'geenreactie'));
  }
  elseif ($mode == 'edit') {
    // is er al een entry in DB voor deze $id
    $result = db_result(db_query("SELECT COUNT(bezid) FROM {gp_optredens} WHERE nid = ':nid' AND uid = ':uid'", array(':nid' => $nid, ':uid' => $id)));
    if (!$result) {
      db_query("INSERT INTO {gp_optredens} (nid, uid, speel_status)
                   VALUES (':nid', ':uid', ':speel_status')", array( ':nid' =>$nid, ':uid' => $id, ':speel_status' => 'geenreactie'));
    }
  }
}

/*
 * function removes players from DB playerslist if they are
 * not present on the node players list */
function gp_bezetting_remove_ghosts($node_players_list, $nid) {
  //debug  -   drupal_set_message('checking ghosts');
  $sql = "SELECT uid FROM {gp_optredens} WHERE nid = ':nid'";
  $result =  db_query($sql, array(':nid' => $nid));
  $db_array = array();
  foreach ($result as $row) {
    $db_array[] = $row -> uid;
  }
  if ($delete_arr = array_diff($db_array, $node_players_list)) {
    foreach ($delete_arr as $item) {
      db_query("DELETE FROM {gp_optredens} WHERE nid = %d AND uid = %d", $nid, $item);
    }
  }
}

function gp_get_status($node_id, $speler_id) {
  $res = db_query("SELECT speel_status FROM {gp_optredens} WHERE nid = ':nid' AND uid = ':uid'", array(':nid' => $node_id, ':uid' => $speler_id))-> fetchAssoc();
  $ret = $res['speel_status'];
  return $ret;
}

function is_actieve_speler($uid) {
  $sql = "SELECT pv.`value` FROM profile_value pv JOIN users u ON (pv.uid = u.uid)
          WHERE pv.fid = :fid AND u.`status` = 1 AND u.uid = :uid AND u.`status` = 1";
  $instr = db_query($sql, array(':fid' => variable_get('gigplanning_section', 'profile-sectie'), ':uid' => $uid))-> fetchField();
  //debug - drupal_set_message($instr);
  if ($instr == "Niet-speler") { $instr = "";} //is hack JSJ
  if ($instr) {
    return TRUE; } else { return FALSE; }
}

//TODO rechten niet naar sario maar los instelbaar (access)
function sario_link($node_id) {
  global $user;
  if (user_access('send reminder') || ($user-> nid == 1)) {
    return  l('Handmatige reminder versturen', 'optreden/reminder/'. $node_id);
  }
}

function gp_optreden_reminder($nid) {
  return drupal_get_form("gp_optreden_reminder_form", $nid);
}

function gp_optreden_reminder_form(&$form_state, $nid) {
  global $base_url;
  $spelers = deel_bezetting_arr($nid, "nee");
  $form['nee'] = array(
  '#prefix' =>"<table id = 'manual-remind-table'><tr><td>",
    '#suffix' =>"</td>",
    '#title' => 'Doen niet mee',
      '#type' => 'checkboxes',
    '#options' => $spelers,
    '#selected' => TRUE,
  );
  $spelers = deel_bezetting_arr($nid, "ja");
  $form['ja'] = array(
    '#prefix' =>"<td>",
    '#suffix' =>"</td>",
    '#title' => 'Ja',
      '#type' => 'checkboxes',
    '#options' => $spelers,
    //'#default_value' => $spelers,
    );
  $spelers = deel_bezetting_arr($nid, "vraagteken");
  $form['vraagteken'] = array(
    '#prefix' =>"<td>",
    '#suffix' =>"</td>",
    '#title' => 'Vraagtekens',
      '#type' => 'checkboxes',
    '#options' => $spelers,
    '#default_value' => $spelers,
    );
  $spelers = deel_bezetting_arr($nid, "geenreactie");
  $form['geenreactie'] = array(
    '#prefix' =>"<td>",
    '#suffix' =>"</td></tr></table>",
    '#title' => 'Geen reactie',
      '#type' => 'checkboxes',
    '#options' => $spelers,
    '#default_value' => $spelers,
    );
  $form['tekst'] = array(
    '#type' => 'textarea',
  '#description' => t('Tekst voor het e-mailbericht'),
  '#default_value' => $base_url . "/node/". $nid,
  '#cols' => 40,
  '#rows' => 5,
    );
  $form['nid'] = array(
    '#type' => 'value',
  '#value' => $nid,
    );
  $form['submit'] = array(
    '#type' => 'submit',
  '#value' => t('Verzend e-mail'),
    );
  return $form;
}

function gp_optreden_reminder_form_submit($form, &$form_state) {
  //debug - print_r($form_state);
  $spelers = array();
  $categorien = array("nee", "vraagteken", "geenreactie", "ja");
  foreach ($categorien as $cat) {
  foreach ($form_state['values'][$cat] as $naam => $waarde) {
    if ($waarde) {
    $spelers[] = $naam;
    }
  }
  }
  gp_manual_remind_mail($spelers, $form_state['values']['tekst'], $form_state['values']['nid'] );
}

function gigplanning_cron () {
  $today = time();
  $sql = "SELECT UNIX_TIMESTAMP(field_reageren_value), nid FROM {content_type_optreden} WHERE DATE(field_datum_value) > CURDATE()";
  $res = db_query($sql)-> fetchAssoc();
  foreach ($res as $res_arr) {
    $ultimate = $res_arr['field_reageren_value'];
    $diff = floor(($ultimate - $today) / (60*60*24));
    //debug - echo $diff;
    if (($diff == 7) || ($diff ==2) || ($diff == 0) || ($diff < 0)) {
      $optreden_id = $res_arr['nid'];
      $players_arr = gp_select_players_to_remind($res_arr['nid'], $diff);
      if (!empty($players_arr)) {
        foreach ($players_arr as $player) {
          gp_set_reminder_flag($player, $optreden_id, $diff);
          gp_remind_mail($player, $res_arr['nid'], $diff);
        }
      }
    }
  }
  //nieuwe spelers
}

function gp_manual_remind_mail($name_arr, $mail_text, $nid) {
  global $user;
  $params['tekst'] = $mail_text;
  //$params['from'] = $user-> mail;
  foreach ($name_arr as $naam){
    $account = user_load(array('name' => check_plain($naam)));
    $params['account'] = $account;
    drupal_mail('gigplanning', 'manual_remind_mail', $account->mail .",". $user->mail , user_preferred_language($account), $params);
    drupal_set_message('Herinneringsmail verstuurd naar '. $naam);
  }
  drupal_goto('node/'. $nid);
}

function gp_remind_mail($uid, $optreden_id, $diff) {
  if ($diff < 0) {
    $params['verloopt'] = "is inmiddels verlopen.";
  } elseif ($diff == 0) {
      $params['verloopt'] = "verloopt morgen.";
    } elseif ($diff == 2) {
        $params['verloopt'] = "verloopt zeer binnenkort.";
      }  elseif ($diff == 7) {
           $params['verloopt'] = "verloopt volgende week.";
         }
  else {
    return null;
  }
  $account = user_load($uid);
  $params['optreden_id'] = $optreden_id;
  $params['remind'] = $diff;
  $params['account'] = $account;
  $params['sql'] = $dum;
  drupal_mail('gigplanning', 'crontest', $account->mail , user_preferred_language($account), $params);
}

function gp_select_players_to_remind($optreden_id, $diff) {
  $field = gp_set_db_field($diff);
  $sql = "SELECT * FROM {gp_optredens} WHERE nid = ':nid' AND speel_status = ':speel_status' AND ". $field ." = 0";
 // drupal_set_message($sql);  //debug
  $res = db_query($sql, array(':nid' => $optreden_id, ':speel_status' => 'geenreactie'))->fetchAssoc();
  foreach($res as $res_arr) {
    $pl[] = $res_arr['uid'];
  }
  return $pl;
}

function gp_set_reminder_flag($player, $optreden_id, $diff) {
  $field = gp_set_db_field($diff);
  $sql ="UPDATE {gp_optredens} SET ". $field ." = 1 WHERE nid = ':nid' AND uid = ':uid'";
  //drupal_set_message($sql . $optreden_id);
  $res = db_query($sql, array(':nid' => $optreden_id, ':uid' => $player));
}

function gp_set_db_field($diff) {
  switch ($diff) {
    case (0) :
      $field = "rem_1";
      break;
    case (2) :
      $field = "rem_2";
      break;
    case (7) :
      $field = "rem_7";
      break;
    default :
      $field = "rem_0";
      break;
  }
  return $field;
}

function gigplanning_mail($key, &$message, $params) {
  global $base_url;
  $language = $message['language'];
  $variables = user_mail_tokens($params['account'], $language);
  $footer = "Met vriendelijke groeten\n\n" .$params['afz'] ."\n**********\nDit is een automatisch bericht van " . variable_get('gigplanning_email_from_name', 'Gigplanning') . "\nReageren d.m.v. \"reply\" of \"beantwoorden\" is niet mogelijk";
  switch ($key) {
  case 'crontest':
    $message['subject'] = "Reactie optreden: Deadline loopt af";
    $message['body'] = t("Beste !username\n\n", $variables, $language->language);
    $message['body'] .= "De deadline voor het optreden \n" . $base_url . "/node/". $params['optreden_id'] ."\n". $params['verloopt'] ."\n\nGaarne zo snel mogelijk laten weten of je wel of niet kunt\n\n". $params['list'] ."\n\n";
    $message['body'] .= $footer;
    break;
  case 'nwe_optreden':
    $message['subject'] = "Aanvraag optreden: ". $params['optreden_titel'];
    $message['body'] = t("Beste !username\n\nEr is een aanvraag voor een optreden. \nGaarne via onderstaande link op de website aangeven of je mee kunt doen.\n\n", $variables, $language->language);
    $message['body'] .= $params['node_url'] ."\n\n";
    $message['body'] .= $params['optreden'] ."\n";
    $message['body'] .= $footer;
    break;
  case 'update_optreden':
    $message['subject'] = "Update: ". $params['optreden_titel'];
    $message['body'] = t("Beste !username\n\n", $variables, $language->language);
    $message['body'] .= $params['optreden'] ."\n";
    $message['body'] .= $params['node_url'] ."\n\n";
    $message['body'] .= $footer;
    break;
  case 'manual_remind_mail':
    $message['subject'] = "Reminder voor optreden";
    $message['body'] = $params['tekst'] ."\n\n";
    break;
  }
}



function deel_bezetting_arr($optreden_id, $speel_status){
  $sql = "SELECT
            users.name AS name,
          users.uid AS id
        FROM gp_optredens bez
        JOIN users ON (bez.uid = users.uid)
          WHERE bez.nid = ':nid'
      AND users.`status` = 1
      AND bez.speel_status = ':speel_status'";
  $result = db_query($sql, array(':nid' => $optreden_id, ':speel_status' => $speel_status))-> fetchAssoc();
  $spelers = array();
  foreach($result as $row) {
   $spelers[$row['name']] = $row['name'];
  }
  return $spelers;
}

/*
 * returns array of players in a section for sectionname given.
 * RID 5 = 'vaste speler'. This is not hardcoded anymore
 */
function _gp_sectie_spelers($sectie_naam) {
  $sql = "SELECT u.name AS user_name
            FROM users u
              JOIN profile_value pv
                ON (u.uid = pv.uid)
         JOIN users_roles ur
        ON (u.uid = ur.uid)
             WHERE pv.value = ':value' AND u.status = ':status' AND ur.rid = ':rid";
  $result = db_query($sql, $sectie_naam, 1, variable_get('gigplanning_role_bandmembers',''))-> fetchAssoc();
  foreach($result as $row) {
    $rows[] = $row['user_name'];
  }
  //debug -   print_r($rows);
  return $rows;
}

/**************************************************************************************/

/**
 * Implementation of hook theme
 * This will register the theme function with drupal
 */
function gigplanning_theme() {
  return array(
    'onstage_widget' => array(
      'arguments' => array('nid', 'uid', 'cur_state'),
     ),
    'gp_gig_table' => array(
      'variables' => array('variables' => NULL),
     ),
  );
}

/* the function for onstage_widget */
function theme_onstage_widget($nid, $uid, $cur_state) {
  // $elem_id = $nid . $uid_this_row;                     //id is voor jQuery element element selection
  $output = '<div class = "podium-link">' . '<a class= "podium-link-actie" href=/optreden/set_stage/' . $nid . '/' . $uid . '/' . $cur_state . '>' . t('On Stage') . '</a></div>';
  return $output;
}

/* When the OnStage button is clicked this function
 * will be called to toggle the ons ateg setting
 */

function gp_optreden_set_stage($nid, $uid, $cur_state) {
  if ($cur_state) {  // = 1
    $new_state = 0;
  $stage_text = "";
  }
  else {
    $new_state = 1;
  $stage_text = t("On Stage");
  }
  $sql = "UPDATE {gp_optredens} SET on_stage = ':on_stage' WHERE nid = ':nid' AND uid = ':uid";
  db_query($sql, array(':on_stage' => $new_state, ':nid' => $nid, ':uid' => $uid));
  print drupal_to_js(
    array(
      'id' => $uid,
    'stage_text' => $stage_text,
    )
  );
}

function onstage_widget($nid, $uid, $cur_state) {
  drupal_add_js(drupal_get_path('module', 'gigplanning') .'/js/set_stage.js');
  return theme('onstage_widget', $nid, $uid, $cur_state);
}

/* returns all sections */
function gp_get_all_sections() {
  $fid = variable_get('gigplanning_section', NULL);
  $sql = "SELECT DISTINCT value FROM {profile_value} WHERE fid = ':fid'";
  $result = db_query($sql, array(':fid' => $fid));
  $sections = array();
  while ($row = $result-> fetchAssoc()) {
    $sections[$row['value']] = $row['value'];
  }
  return $sections;
}

function gp_get_all_sections_full() {
  $fid = variable_get('gigplanning_section', NULL);
  $sql =  "SELECT DISTINCT pv.`value`, gss.id, gss.section_size AS size
           FROM profile_value pv
           LEFT OUTER JOIN gp_section_size gss ON (pv.`value` = gss.section_name)
           WHERE pv.fid = ':fid'";
  $result = db_query($sql, array(':fid' => $fid));
  $rows = array();
  while ($row = $result-> fetchAssoc()) {
    $rows[] = $row;
  }
  return $rows;
}

/* returns sections (array) to include per node */
function gp_include_sections($nid) {
  $sql = "SELECT flex_sections FROM {gp_flex_sections} WHERE nid = ':nid'";
  $result = db_query($sql, array(':nid' => $nid))-> fetchField();
  if ($result) {
    // debug - drupal_set_message($result);
    $sections = unserialize($result);
    return $sections;
  }
  else {
    drupal_set_message('No flex sections found for this gig '. $nid);
  return FALSE;
  }
}

function gigplanning_requirements($phase) {
  $req = array();
  if ($phase == 'runtime') {
    // Check if section sizes are set and synced with DB
    $sections = gp_get_all_sections_full();
    $synced = TRUE;
    foreach ($sections as $section) {
      if (!$section['id']) {
        $synced = FALSE;
      }
    }
    if ($synced) {
      $sync_info = t("Section DB is synced with Profile sections");
      $sev = REQUIREMENT_OK;
    }
    else {
      $sync_info = "Section DB not synced with Profiles. Select this " . '<a href = "/gp/sync_sections">link</a>' . " to sync the data";
      $sev = REQUIREMENT_ERROR;
    }
    $req['gp'] = array(
      'value' => $sync_info
    );

  $req['gp']['title'] = 'Gigplanning';
  $req['gp']['severity'] = $sev;
  }
  return $req;
}

/* Functie kijkt of er voor iedere sectie een gigplaaning dn entry bestaat */
function gigplanning_sync_sections() {
  $sections = gp_get_all_sections_full();
  foreach ($sections as $section) {
    if (!$section['id']) { _gp_sync_section($section);}
  }
  drupal_goto('/admin/reports/status');
}

function _gp_sync_section($section) {
  $sql = "INSERT INTO {gp_section_size} (section_name, section_size) VALUES (':name', ':size')";
  db_query($sql, array(':name' => $section['value'], ':size' => 0));
}

function gp_sectie_lid($name, $arr) {
  return in_array_r($name, $arr);
}

function in_array_r($needle, $haystack, $strict = true) {
  foreach ($haystack as $item) {
    if (($strict ? $item === $needle : $item == $needle) || (is_array($item) && in_array_r($needle, $item, $strict))) {
      return TRUE;
    }
  }
  return FALSE;
}

function gp_count($needle, $haystack) {
  $count = 0;
  foreach ($haystack as $arr) {
    (in_array($needle, $arr) ? $count++ : $count = $count);
  }
  return $count;
}

/**
 * Implements hook_block_info().
 */
function gigplanning_block_info() {
  $blocks['top_propasals'] = array(
    'info' => t('Top Proposals'),
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => '<front>',
  );
  $blocks['welkom'] = array(
      'info' => t('Welcome to Gigplanning'),
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => '<front>',
      'weight' => -50,
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function gigplanning_block_configure($delta = '') {
  $form = array();
  if($delta == 'top_proposals' ) {
   $form['top_proposals_num'] = array(
      '#type' => 'textfield',
      '#title' => t('Number proposals to display'),
      '#default_value' => variable_get('gigplanning_top_proposals_num', 8),
      //'#options' =>,
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function gigplanning_block_save($delta = '', $edit = array()) {
  if ($delta == 'top_proposals') {
    variable_set('gigplanning_top_proposals_num', (int)$edit['gp_top_proposals_num']);
  }
}

/**
 * Implements hook_block_view().
 */
function gigplanning_block_view($delta = '') {
  $block = array();
  if ($delta == 'top_proposals') {
    $num_posts = variable_get('gp_top_proposals_num', 8);
    $sql = "SELECT
      node.nid AS nid,
      RPAD(LEFT(node.title, 24),33,'.') AS nummer, vote.`value` AS score,
      voorstel.field_status_voorstel_value AS v_status
      FROM node node
      INNER JOIN users users ON node.uid = users.uid
      LEFT JOIN votingapi_cache vote ON node.nid = vote.content_id
      JOIN content_type_voorstel voorstel ON (node.nid = voorstel.nid)
      WHERE (node.status = 1)
      AND (node.type in (':type'))
      AND (vote.`function` = ':function')
      AND ((voorstel.field_status_voorstel_value IS NULL) OR (voorstel.field_status_voorstel_value = ':value'))
      ORDER BY Score DESC LIMIT ':limit'";
    $result = db_query($sql, array(':type' => 'voorstel', ':function' => 'sum', ':value' => 'proposal', ':limit' => $num_posts))-> fetchAssoc();
    $destination = drupal_get_destination();
    $data = array();
    foreach ($result as $row) {
      $rows[] = l($row['nummer'] . '(' . $row['score'] . ')', 'node/'. $row['nid']);
    }
    $block['subject'] = t('Top proposals');
    // We theme our array of links as an unordered list.
    $block['content'] = theme('item_list', $rows, NULL, 'ol') . '<p><a href= "voorstellen">Overzicht&nbsp;voorstellen &raquo;</a>';
  }

  if ($delta == 'welkom') {
    global $user;
    $website = variable_get('gp_band_website', 'http://www.gigplanning.com');
    $name = variable_get('gp_band_name', 'Gigplanning');
    $output = t('This is the Gigplanning website for %band_name.<br />It is accessible for band members only. Please select <a href = @link>this link</a> to visit our public site', array('%band_name' => $name, '@link' => $website ));
    if (is_actieve_speler($user-> uid)) {
      $output .= _gp_openstaande_optredens($user-> uid);
    }
    $block['subject'] = t('Welcome to Gigplanning');
    $block['content'] = $output;
  }
  return $block;
}

/* Amount of gigs this year */
function gp_nmbr_gigs($nid) {
}

/*
 * This is a maintanance function. Please run it after insterting or deleting a bandmemder
 * is assures. The gp_tables stays uo to date
 */
function gigplanning_users_maintenance() {
  // make shure all active players are listed in gigtables:
  $players = gp_get_active_players_list();
  $gigs = gp_get_current_gigs();
  foreach ($players as $uid) {
    foreach ($gigs as $nid) {
      _gp_user_maint($uid, $nid);
    }
  }
  drupal_goto('');
}

function _gp_user_maint($uid, $nid) {
  $sql = "SELECT bezid FROM gp_optredens WHERE uid = ':uid' AND nid =':nid'";
  $bezid = db_query($sql, array(':uid' => $uid, ':nid' => $nid))-> fetchField();
  if (!$bezid) {
    //we have to enter this into gp_optredens
    gp_add_player_to_gig($uid, $nid);
    drupal_set_message('No bezid (' . $bezid . ')  for ' . $uid . ' at ' .  $nid);
  }
  else {
    drupal_set_message('bezid (' . $bezid . ')');
  }
}

//get the list of all current gigs
function gp_get_current_gigs() {
  $gigs = array();
  $sql = "SELECT nid FROM {content_type_optreden} WHERE DATE(field_datum_value) > CURDATE()";
  $result = db_query($sql)-> fetchAssoc();
  foreach ($result as $row) {
    $gigs[] = $row['nid'];
  }
  return $gigs;
}

//returns an array with the uids of current full-time players
function gp_get_active_players_list() {
  $player_ids = array();
  $sql = "
  SELECT users.uid AS users_uid
  FROM users users
  INNER JOIN users_roles users_roles ON users.uid = users_roles.uid
  WHERE users_roles.rid = ':rid' AND users.status = ':status'";
  $result = db_query($sql, array(':rid' => variable_get(gigplanning_role_bandmembers, NULL), ':status' => 1));
  foreach($result as $row) {
    $player_ids[] = $row['users_uid'];
  }
  return $player_ids;
}

function gp_add_player_to_gig($uid, $nid) {
  $sql = "INSERT INTO gp_optredens (nid, uid, speel_status) VALUES (':nid', ':uid', ':speel_status')";
  db_query($sql, array(':nid' => $nid, ':uid' => $uid, ':speel_status' => 'geenreactie'));
}

/*
 * This theme function adds a table on a node containing the players of
 * the band and wether or not they can attend a gig
 *
 */
function _gp_gig_table_get_variables($nid) {
  global $user;
  $variables = array();
  $gp_user_data = _gp_user_data($user-> uid);
  $variables['user_section'] = $gp_user_data['section'];
  $variables['nid'] = $nid;
  $variables['podium'] = variable_get('gigplanning_podium_indeling', 0);
  $variables['maybe'] = variable_get('gigplanning_maybe_option', 1);
  // secties ophalen
  $secties = _gp_secties(FALSE);
  foreach ($secties as $sectie) {
    $variables['sections'][$sectie]['size'] = _gp_section_size($sectie);          // size of a section
    // set data if this section is current player's section
    if ($variables['user_section'] == $sectie) {
      $variables['sections'][$sectie]['is_players_section'] = TRUE;
    }
    else {
      $variables['sections'][$sectie]['is_players_section'] = FALSE;
    }
    $players = _gp_gig_data($sectie, $nid);
    $variables['sections'][$sectie]['players'] = $players;
  }
  return $variables;
}

function theme_gp_gig_table($variables) {
  //print_r($variables);exit;
  global $user;
  $uid = $user-> uid;

  //Zet reactiebalk in $output_rb
  if (!is_actieve_speler($uid)) {
    $output_rb = '<span class="reactie-balk-text">Geen actieve speler</span>';
  }
  else {
    $maybe = $variables['maybe'];
    $node_id = $variables['nid'];
    $speel_status = $variables['sections'][$variables['user_section']]['players'][$uid]['speel_status'];
    $maybe_link_none =  l(t('Maybe'), 'optreden/changestatus/'. $node_id .'/'. $uid . '/vraagteken', array('attributes' => array('id' => 'reactie-balk-vraagteken', 'class' => 'reactie-buttons-button', 'style' => 'display:none;'))) . '</div>';
    $maybe_link      = l(t('Maybe'), 'optreden/changestatus/'. $node_id .'/'. $uid . '/vraagteken', array('attributes' => array('id' => 'reactie-balk-vraagteken', 'class' => 'reactie-buttons-button' ))) . '</div>';
    $yes_link_display_none = l(t('Yes'), 'optreden/changestatus/'. $node_id .'/'. $uid .'/ja', array('attributes' => array('id' => 'reactie-balk-ja',  'class' => 'reactie-buttons-button','style' => 'display:none;')));
    $yes_link = l(t('Yes'), 'optreden/changestatus/'. $node_id .'/'. $uid .'/ja', array('attributes' => array('id' => 'reactie-balk-ja', 'class' => 'reactie-buttons-button')));
    $no_link_display_none = l(t('No'), 'optreden/changestatus/'. $node_id .'/'. $uid . '/nee', array('attributes' => array('id' => 'reactie-balk-nee', 'style' => 'display:none;', 'class' => 'reactie-buttons-button' )));
    $no_link = l(t('No'), 'optreden/changestatus/'. $node_id .'/'. $uid . '/nee', array('attributes' => array('id' => 'reactie-balk-nee', 'class' => 'reactie-buttons-button' )));
    switch ($speel_status) {
      case 'ja':
        $ret1 = '<span class = "reactie-balk-text">Je hebt je al opgegeven voor dit optreden</span>';
        $ret2 = '<div id = "reactie-buttons">'.
            $yes_link_display_none . $no_link_display_none . ($maybe ? $maybe_link_none : '') . '</div>';
        break;
      case 'nee':
        $ret1 = '<span class = "reactie-balk-text">Je doet niet mee. Je kunt dit indien gewenst alsnog aanpassen</span>';
        $ret2 = '<div id = "reactie-buttons">'.
            $yes_link .  $no_link_display_none . ($maybe ? $maybe_link : '') . '</div>';
        break;
      case 'vraagteken':
        $ret1 = '<span class = "reactie-balk-text">Er staat voor een vraagteken voor dit optreden. Je kunt dit indien gewenst alsnog aanpassen</span>';
        $ret2 = '<div id = "reactie-buttons">'.
            $yes_link . $no_link . ($maybe ? $maybe_link_none : '') . '</div>';
        break;
      case 'geenreactie':
        $ret1 = '<span class = "reactie-balk-text">Je hebt nog niet gereageerd. Gaarne dit alsnog doen</span>';
        $ret2 = '<div id = "reactie-buttons">'.
            $yes_link . $no_link . ($maybe ? $maybe_link : '') . '</div>';
        break;
      default:
        $ret1 = "default switch - case";
        break;
    }
    $output_rb = $ret1 . $ret2 . "<div class='clear-both'></div>";
  }
  //print_r($variables); exit;
  $sections = $variables['sections'];
  $podium = $variables['podium'];
  $i = 0;
  $output3 = '<div id = "bezetting">';
  foreach ($sections as $section_name => $section) {
    $sectie_lid = $section['is_players_section'];
    $sectie_size = $section['size'];
    $sectie_ja = gp_count('ja', $section['players']);
    //debug  drupal_set_message($sectie . " \ count = " . count($sectie_spelers_arr) . "\ count -ja = " . gp_count('ja', $sectie_spelers_arr) . '/ size ; =  ' . gp_sectie_size($sectie));
    $i++;
    if ($i == 1) {
      $output3 .= '<div id="col1">';
    }
    elseif ($i == 4) {
      $output3 .= '</div><!-- close col1--><div id="col2">';
    }
    elseif ($i == 7) {
      $output3 .= '</div><!-- close col2--><div id="col3">';
    }
    elseif ($i == 10) {
      $output3 .= '</div><!-- close col3--><div id="col4">';
    }

    $output3 .= '<div class = "sectie-head">' . $section_name . '</div>';
    $output3 .= '<div class = "row">';
    foreach ($section as $key => $section_arr) {
      if ($key == 'players') {
        foreach ($section_arr as $arr) {
          if ($podium) {    // if podium option activated
            if ($sectie_lid && ($arr['speel_status'] == 'ja') && ($sectie_ja > $sectie_size)) {    // if player is member of section AND is available
              $output3 .= '<div class = "naam-label">' . $arr['name'] . onstage_widget($arr['nid'], $arr['uid'], $arr['on_stage']) . '</div>';
            }
            else {
              $output3 .= '<div class = "naam-label">' . $arr['name'] . '</div>';
            }
            if ($arr['on_stage']) { // player is On Stage
              $output3 .= '<div class = "' . $arr['speel_status'] . '" id = "podium-link-'. $arr['uid'] . '">' . "On Stage" . '</div><div class="clear-both"></div>';
            }
            else {
              $output3 .= '<div class = "' . $arr['speel_status'] . '" id = "podium-link-'. $arr['uid'] . '">&nbsp;</div><div class="clear-both"></div>';
            }
          }
          // Podium option not activated
          $output3 .= '<div class = "naam-label">' . $arr['name'] . '</div>';
          $output3 .= '<div class = "' . $arr['speel_status'] . '" id = "podium-link-'. $arr['uid'] . '">&nbsp;</div><div class="clear-both"></div>';
        }
      }
    }// if $key == players
  $output3 .= '</div><!----end of section start new--->'; // row
  }
  $output3 .= '</div>'; // div col2
  $output3 .= '<div class="clear-both"></div>';
  $output3 .= '</div>'; // div bezetting */
  return $output_rb . $output3;
}

function _gp_section_size($section) {
  $id = db_query("SELECT id FROM {gp_section_size} WHERE section_name = ':name'", array(':name' => $section))-> fetchField();
  return variable_get('gigplanning_section_size_' . $id, 0);
}

//Return a SQL to retrieve gig details for a certain gig and section
function _gp_gig_data($section, $gig_id) {
  $players = array();
  $sql = "SELECT
      users.name AS name,
      bez.speel_status AS speel_status,
      bez.on_stage AS on_stage,
      bez.nid AS nid,
      bez.uid AS uid
      FROM gp_optredens bez
      JOIN   profile_value pv
      ON (bez.uid = pv.uid)
      JOIN users
      ON (pv.uid = users.uid)
      WHERE pv.`value` = :value AND bez.nid = :nid AND users.`status` = 1";
  $result = db_query($sql, array(':value' => $section, ':nid' => $gig_id));
  $players = array();
  while ($row = $result-> fetchAssoc()) {
    $players[$row['uid']] = $row;
  }
  return $players;
}

//TODO fid abstaheren
function _gp_user_data($uid) {
  $sql = "SELECT
    name AS name,
    mail AS email,
    pv.`value` as section
    FROM {users}
    JOIN {profile_value} pv ON (users.uid = pv.uid)
    WHERE users.uid = :uid AND pv.fid = :fid";
  $result = db_query($sql, array(':uid' => $uid, ':fid' => 2))-> fetchAssoc();
  return $result;
}
